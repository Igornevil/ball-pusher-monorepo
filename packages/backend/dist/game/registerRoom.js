import { initializeGame } from './initializeGame.js';
import { gameManager } from './GameManager.js';
export function registerRoomHandlers(socket) {
  let currentRoomId = null;
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
  socket.on('join_room', (roomId, settings) => {
    let room = gameManager.getRoom(roomId);
    if (!room) {
      // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
      room = gameManager.createRoom(settings);
    }
    currentRoomId = room.id;
    socket.join(room.id);
    console.log(
      `üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${room.id}`,
    );
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    initializeGame(room, settings);
  });
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–π –∫—É—Ä—Å–æ—Ä–∞
  socket.on('cursor_move', (position) => {
    if (!currentRoomId) return;
    const room = gameManager.getRoom(currentRoomId);
    if (!room) return;
    room.users.set(socket.id, { id: socket.id, cursor: position });
  });
  // –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã
  socket.on('start_game', (settings) => {
    if (!currentRoomId) return;
    const room = gameManager.getRoom(currentRoomId);
    if (!room) return;
    initializeGame(room, settings);
  });
  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('disconnect', () => {
    if (!currentRoomId) return;
    const room = gameManager.getRoom(currentRoomId);
    if (!room) return;
    room.users.delete(socket.id);
    console.log(
      `üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∫–æ–º–Ω–∞—Ç—ã ${room.id}`,
    );
  });
}
