import express from 'express';
import http from 'http';
import { Server } from 'socket.io';
import Matter from 'matter-js';
import C from './constants.js';
// --- 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø MATTER.JS ---
const { Engine, World, Bodies, Body, Vector } = Matter;
// –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π "–º–æ–∑–≥" —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –º–∏—Ä–∞
const engine = Engine.create();
// –û—Ç–∫–ª—é—á–∞–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –≤–∏–¥ —Å–≤–µ—Ä—Ö—É
engine.world.gravity.y = 0;
// --- 2. –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–†–í–ï–†–ê ---
const PORT = 3000;
const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: { origin: '*', methods: ['GET', 'POST'] },
});
// --- 3. –ò–ì–†–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ---
// –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∫—É—Ä—Å–æ—Ä–æ–≤)
let users = new Map();
// –ö–∞—Ä—Ç–∞ –¥–ª—è —Å–≤—è–∑–∏ ID —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–ª–∞ Matter.js —Å –Ω–∞—à–∏–º –∏–≥—Ä–æ–≤—ã–º ID —à–∞—Ä–∏–∫–∞
let matterBodyIdToBallId = new Map();
// –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —à–∞—Ä–∏–∫–∞ (—Ü–≤–µ—Ç, —Å—Ç–∞—Ç—É—Å), –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–∑–∏–∫–æ–π
let ballDataStore = new Map();
// --- 4. –°–û–ó–î–ê–ù–ò–ï –ì–†–ê–ù–ò–¶ –ú–ò–†–ê ---
// –°–æ–∑–¥–∞–µ–º 4 —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ (—Å—Ç–µ–Ω—ã)
const wallOptions = { isStatic: true, restitution: 1.0, friction: 0 };
World.add(engine.world, [
  // –ø–æ–ª (—Å–Ω–∏–∑—É)
  Bodies.rectangle(C.WIDTH / 2, C.HEIGHT + 25, C.WIDTH, 50, wallOptions),
  // –ø–æ—Ç–æ–ª–æ–∫ (—Å–≤–µ—Ä—Ö—É)
  Bodies.rectangle(C.WIDTH / 2, -25, C.WIDTH, 50, wallOptions),
  // –ª–µ–≤–∞—è —Å—Ç–µ–Ω–∞
  Bodies.rectangle(-25, C.HEIGHT / 2, 50, C.HEIGHT, wallOptions),
  // –ø—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞
  Bodies.rectangle(C.WIDTH + 25, C.HEIGHT / 2, 50, C.HEIGHT, wallOptions),
]);
/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é: –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ —à–∞—Ä–∏–∫–∏.
 */
function initializeGame(settings) {
  // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∏—Ä–∞ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞—Ä–∏–∫–∏ (—Ç–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏)
  const allBalls = engine.world.bodies.filter((body) => !body.isStatic);
  World.remove(engine.world, allBalls);
  // –û—á–∏—â–∞–µ–º –Ω–∞—à–∏ –∫–∞—Ä—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  matterBodyIdToBallId.clear();
  ballDataStore.clear();
  const { quantity, numOfColors } = settings;
  const activeColorKeys = C.COLOR_KEYS.slice(0, numOfColors);
  const bodiesToAdd = [];
  for (let i = 0; i < quantity; i++) {
    const randomColorKey =
      activeColorKeys[Math.floor(Math.random() * activeColorKeys.length)];
    const ballId = i.toString();
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ Matter.js —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –Ω–∞—à–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
    const body = Bodies.circle(
      Math.random() * C.WIDTH,
      Math.random() * C.HEIGHT,
      C.BALL_RADIUS,
      {
        restitution: C.RESTITUTION,
        friction: C.FRICTION,
        frictionAir: C.FRICTION_AIR,
        frictionStatic: C.FRICTION_STATIC,
        density: C.DENSITY,
      },
    );
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∏ –∏ –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    matterBodyIdToBallId.set(body.id, ballId);
    ballDataStore.set(ballId, { color: randomColorKey, status: 'NONE' });
    bodiesToAdd.push(body);
  }
  World.add(engine.world, bodiesToAdd);
  console.log(`üöÄ –ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å ${quantity} —à–∞—Ä–∏–∫–∞–º–∏.`);
}
/**
 * –ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º —Ç–∏–∫–µ —Å–µ—Ä–≤–µ—Ä–∞.
 */
function gameLoop() {
  const allBalls = engine.world.bodies.filter((body) => !body.isStatic);
  for (let i = 0; i < allBalls.length; i++) {
    const b1 = allBalls[i];
    // --- —Ö–∞–æ—Ç–∏—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (–∫–∞–∫ –º–∏–∫—Ä–æ–±—ã) ---
    const noise = Vector.create(
      (Math.random() - 0.5) * C.NOISE_FORCE,
      (Math.random() - 0.5) * C.NOISE_FORCE,
    );
    Body.applyForce(b1, b1.position, noise);
    // --- –ª—ë–≥–∫–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (—ç—Ñ—Ñ–µ–∫—Ç –∂–∏–¥–∫–æ—Å—Ç–∏) ---
    Body.setVelocity(b1, {
      x: b1.velocity.x * 0.99,
      y: b1.velocity.y * 0.99,
    });
    // --- –∫—É—Ä—Å–æ—Ä–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ ---
    for (const user of users.values()) {
      if (user.cursor) {
        const distVector = Vector.sub(b1.position, user.cursor);
        const distance = Vector.magnitude(distVector);
        if (distance < C.CURSOR_REPULSE_RADIUS && distance > 0) {
          const strength =
            C.CURSOR_REPULSE_STRENGTH *
            (1 - distance / C.CURSOR_REPULSE_RADIUS);
          const force = Vector.mult(Vector.normalise(distVector), strength);
          Body.applyForce(b1, b1.position, force);
        }
      }
    }
    // --- –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —à–∞—Ä–æ–≤ ---
    for (let j = i + 1; j < allBalls.length; j++) {
      const b2 = allBalls[j];
      const data1 = ballDataStore.get(matterBodyIdToBallId.get(b1.id));
      const data2 = ballDataStore.get(matterBodyIdToBallId.get(b2.id));
      const distVector = Vector.sub(b2.position, b1.position);
      const distance = Vector.magnitude(distVector);
      if (distance > 0) {
        const normal = Vector.normalise(distVector);
        // A. –∂—ë—Å—Ç–∫–æ–µ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –∫–æ–Ω—Ç–∞–∫—Ç–µ
        const minDist = C.BALL_RADIUS * 2;
        if (distance < minDist) {
          const overlap = minDist - distance;
          const strength = overlap * 0.005; // —Å–∏–ª—å–Ω–µ–µ
          const force = Vector.mult(normal, -strength);
          Body.applyForce(b1, b1.position, force);
          Body.applyForce(b2, b2.position, Vector.neg(force));
        }
        // B. –ø—Ä–∏–ª–∏–ø–∞–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ü–≤–µ—Ç–æ–≤
        if (data1 && data2 && data1.color === data2.color) {
          const magnetRadius = C.BALL_RADIUS * C.MAGNET_RADIUS_MULTIPLIER;
          if (distance < magnetRadius && distance > minDist) {
            const strength =
              (1 - (distance - minDist) / (magnetRadius - minDist)) *
              C.MAGNET_STRENGTH;
            const force = Vector.mult(normal, strength * 0.002);
            Body.applyForce(b1, b1.position, force);
            Body.applyForce(b2, b2.position, Vector.neg(force));
          }
        }
      }
    }
  }
  // —à–∞–≥–∏ –¥–≤–∏–∂–∫–∞
  const timeStep = 1000 / 60;
  for (let i = 0; i < C.PHYSICS_SUB_STEPS; i++) {
    Engine.update(engine, timeStep / C.PHYSICS_SUB_STEPS);
  }
  // —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º
  const ballsState = {};
  for (const body of allBalls) {
    const ballId = matterBodyIdToBallId.get(body.id);
    const data = ballDataStore.get(ballId);
    if (ballId && data) {
      ballsState[ballId] = {
        id: ballId,
        x: body.position.x,
        y: body.position.y,
        radius: C.BALL_RADIUS,
        color: data.color,
        status: data.status,
      };
    }
  }
  const usersState = Array.from(users.values()).reduce((acc, user) => {
    acc[user.id] = user;
    return acc;
  }, {});
  io.emit('game_state_update', { balls: ballsState, users: usersState });
}
// --- 5. –û–ë–†–ê–ë–û–¢–ö–ê WEBSOCKET-–°–û–ë–´–¢–ò–ô ---
io.on('connection', (socket) => {
  console.log(`üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
  users.set(socket.id, { id: socket.id, cursor: null });
  const ballsState = {};
  for (const body of engine.world.bodies.filter((body) => !body.isStatic)) {
    const ballId = matterBodyIdToBallId.get(body.id);
    const data = ballDataStore.get(ballId);
    if (ballId && data) {
      ballsState[ballId] = {
        id: ballId,
        x: body.position.x,
        y: body.position.y,
        radius: C.BALL_RADIUS,
        color: data.color,
        status: data.status,
      };
    }
  }
  const usersState = Array.from(users.values()).reduce((acc, user) => {
    acc[user.id] = user;
    return acc;
  }, {});
  socket.emit('game_state_update', { balls: ballsState, users: usersState });
  socket.on('start_game', (settings) => {
    initializeGame(settings);
  });
  socket.on('cursor_move', (position) => {
    const user = users.get(socket.id);
    if (user) {
      user.cursor = position;
    }
  });
  socket.on('disconnect', () => {
    console.log(`üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
    users.delete(socket.id);
  });
});
// --- 6. –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
server.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç: ${PORT}`);
  setInterval(gameLoop, 1000 / 30);
});
