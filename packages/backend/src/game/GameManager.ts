import { Server } from 'socket.io';
import { v4 as uuidv4 } from 'uuid';
import { Room } from './Room.js';
import type { GameSettings } from './types.js';

export class GameManager {
  private rooms: Map<string, Room> = new Map();
  private io?: Server;

  setIoServer(io: Server): void {
    this.io = io;
  }

  createRoom(settings: GameSettings): Room {
    const roomId = uuidv4();
    const room = new Room(roomId, settings, this.io);
    this.rooms.set(roomId, room);
    console.log(
      `[GameManager] –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —Ç–∞ –¥–æ–¥–∞–Ω–∞ –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.`,
    );
    return room;
  }

  getRoom(roomId: string): Room | undefined {
    return this.rooms.get(roomId);
  }

  removeRoom(roomId: string): boolean {
    const room = this.rooms.get(roomId);
    if (room) {
      room.cleanup();
    }
    return this.rooms.delete(roomId);
  }

  // –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –∫—ñ–º–Ω–∞—Ç
  cleanupEmptyRooms(): void {
    setInterval(() => {
      for (const [roomId, room] of this.rooms.entries()) {
        if (room.users.size === 0) {
          this.removeRoom(roomId);
          console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è –∫—ñ–º–Ω–∞—Ç–∞: ${roomId}`);
        }
      }
    }, 60000); // –ö–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
  }
}
